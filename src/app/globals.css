@import 'tailwindcss';
@plugin "@tailwindcss/typography";

/* dark-mode -> class: dark */
@custom-variant dark (&:where(.dark, .dark *));

@layer base {
  html.light {
    /* Light theme variables */
    --bg-main: #ffffff;
    --bg-fore: #09090b;
    --bg-card: #fafafa;
  }

  html.dark {
    /* Dark theme variables */
    --bg-main: #09090b;
    --bg-fore: #ffffff;
    --bg-card: #18181b;
  }
}

@theme inline {
  --color-main: var(--bg-main);
  --color-fore: var(--bg-fore);
  --color-card: var(--bg-card);
}

/* view-transition */
::view-transition-group(root) {
  animation-timing-function: var(--expo-out);
}

::view-transition-new(root) {
  mask: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 40"><defs><filter id="blur"><feGaussianBlur stdDeviation="2"/></filter></defs><circle cx="0" cy="0" r="18" fill="white" filter="url(%23blur)"/></svg>')
    top left / 0 no-repeat;
  mask-origin: content-box;
  animation: scale 1s;
  transform-origin: top left;
}

::view-transition-old(root),
.dark::view-transition-old(root) {
  animation: scale 1s;
  transform-origin: top left;
  z-index: -1;
}

@keyframes scale {
  to {
    mask-size: 350vmax;
  }
}

/* prose-code-font */

/* 确保 prose 中的代码元素使用正确的字体 */
.prose code,
.prose pre,
.prose pre code,
.prose :where(code):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  font-family: inherit !important;
}

.prose :where(pre):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
  font-family: inherit !important;
}

/* 针对 rehype-pretty-code 生成的代码块 */
.prose [data-rehype-pretty-code-fragment] pre,
.prose [data-rehype-pretty-code-fragment] code,
.prose [data-rehype-pretty-code-title],
.prose [data-rehype-pretty-code-caption] {
  font-family: inherit !important;
}

/* 确保内联代码和代码块都使用正确字体 */
.prose :not(pre) > code {
  font-family: inherit !important;
}
